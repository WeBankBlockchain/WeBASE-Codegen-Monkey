/**
 * Copyright (C) 2018 WeBank, Inc. All Rights Reserved.
 */
package ${group}.${projectName}.generated.crawler.event;

import java.math.BigInteger;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.fisco.bcos.web3j.abi.EventValues;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import ${contractPackName}.${contractName};
import ${contractPackName}.${contractName}.${eventName}EventResponse;
import ${group}.webasebee.common.bo.data.EventBO;
import ${group}.${projectName}.crawler.face.BcosEventCrawlerInterface;
import ${group}.${projectName}.generated.bo.event.${class_name};
import com.webank.webasebee.common.constants.ContractConstants;
import com.webank.webasebee.common.tools.AddressUtils;
import com.webank.webasebee.common.tools.BigIntegerUtils;
import com.webank.webasebee.common.tools.BytesUtils;
import com.webank.webasebee.common.tools.JacksonUtils;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@ConditionalOnProperty(name = "monitor.${contractName}.${eventName}CrawlerService", havingValue = "on")
public class ${contractName}${eventName}CrawlerImpl implements BcosEventCrawlerInterface {
	@Autowired
    private Web3j web3j;
    @Autowired
    private Credentials credentials;
    @Autowired
    private ContractGasProvider contractGasProvider;
    @Autowired
    private ${contractName} contract;
    
    @Bean
    @ConditionalOnMissingBean
    public ${contractName} get${contractName}() {
        return ${contractName}.load(ContractConstants.EMPTY_ADDRESS, web3j, credentials, contractGasProvider); 

    }
	
	@Override
	public List<EventBO> handleReceipt(TransactionReceipt receipt, BigInteger blockTimeStamp) {
			<%
				var upperEvent = strutil.toUpperCase(eventName);
			%>
		List<EventBO> list = new ArrayList<>();
		for (Log l : receipt.getLogs()) {
            EventValues eventValues = contract.staticExtractEventParameters(contract.${upperEvent}_EVENT, l);
            if (eventValues == null || CollectionUtils.isEmpty(eventValues.getNonIndexedValues())) {
                continue;
            }
            	${class_name} ${lowContractName}${eventName} = new ${class_name}();
			${lowContractName}${eventName}.setIdentifier("${contractName}${eventName}");		
			${lowContractName}${eventName}.setBlockHeight(receipt.getBlockNumber().longValue());
			${lowContractName}${eventName}.setEventContractAddress(receipt.getContractAddress());
			${lowContractName}${eventName}.setTxHash(receipt.getTransactionHash());
			
			<%
			for(var i=0;i<list.~size;i++){
				var entry = list[i];
				var javaCapName = entry.javaCapName;
				var javaName = entry.javaName;
				var typeMethod = entry.typeMethod;			
			%>
			${lowContractName}${eventName}.set${javaCapName}(${typeMethod}(eventValues.getNonIndexedValues().get(${i}).getValue()));
			<% } %>
			${lowContractName}${eventName}.setBlockTimeStamp(new Date(blockTimeStamp.longValue()));
			log.debug("depot ${eventName}:{}", ${lowContractName}${eventName}.toString());
			list.add(${lowContractName}${eventName});
        }
		
		return list;
	}
}
