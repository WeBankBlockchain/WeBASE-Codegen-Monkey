plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'maven'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
}

group = 'com.webank'
version = '1.3.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
	maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    mavenLocal()
    mavenCentral()
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}

		resources {
			srcDir 'src/main/resources'
		}
	}
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	runtime('org.springframework.boot:spring-boot-devtools')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    compile 'cn.hutool:hutool-all:5.3.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'   
    compile('com.ibeetl:beetl:2.9.3')
    
     // web3j依赖
    compile ('org.fisco-bcos:web3sdk:2.3.0')
}

test {
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
}

bootJar {
	destinationDir file('dist')
	archiveName project.name + version + '.jar'
    doLast {
        copy {
            from file('tools/')
            into 'dist/'
        }
		copy {
			from configurations.runtime
			into 'dist/lib'
		}
		copy {
            from file('src/main/resources/application.properties')
            into 'dist/config/'
        }
        copy {
            from file('src/main/resources/web3j.def')
            into 'dist/config/'
        }
		copy {
			from file('.').listFiles().findAll{File f -> (f.name.endsWith('.crt') || f.name.endsWith('.keystore'))}
			into 'dist/config'
		}
		copy {
            from file('config/contract/')
            into 'dist/config/contract'
        }
	}
}

clean {
    println "delete ${projectDir}/dist"
    delete "${projectDir}/dist"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport
